// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;

import java.util.List;

import edu.wpi.first.math.geometry.Pose2d;
import edu.wpi.first.math.geometry.Rotation2d;
import edu.wpi.first.math.geometry.Translation2d;
import edu.wpi.first.math.trajectory.Trajectory;
import edu.wpi.first.math.trajectory.TrajectoryGenerator;
import edu.wpi.first.wpilibj2.command.CommandBase;
import frc.robot.Constants.FollowPathConstants;
import frc.robot.subsystems.DrivetrainSubsystem;

/**
 *
 */
public class AutonomousCommand extends CommandBase {

    private DrivetrainSubsystem m_drivetrainSubsystem;
    private FollowPath m_path;

    public AutonomousCommand(DrivetrainSubsystem drivetrainSubsystem) {

        m_drivetrainSubsystem = drivetrainSubsystem;
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
        Trajectory m_exampleTrajectory = TrajectoryGenerator.generateTrajectory(
                // Start at the origin facing the +X direction
                new Pose2d(0, 0, new Rotation2d(0)),
                // Pass through these two interior waypoints, making an 's' curve path
                List.of(
                        new Translation2d(1, 1),
                        new Translation2d(2, -1)),
                // End 3 meters straight ahead of where we started, facing forward
                new Pose2d(3, 0, new Rotation2d(0)),
                // Pass config
                FollowPathConstants.trajectoryConfig);

        Trajectory m_ballRoutine = TrajectoryGenerator.generateTrajectory(
                // Start point and rotation
                new Pose2d(0, 0, new Rotation2d(0)),
                // Way points
                List.of(),
                // End point and rotation
                new Pose2d(12, 0, new Rotation2d(0)),
                // Pass config
                FollowPathConstants.trajectoryConfig);

        m_path = new FollowPath(m_drivetrainSubsystem, m_ballRoutine);
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
        m_path.cancel();
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return m_path.isFinished();
    }

    @Override
    public boolean runsWhenDisabled() {
        return false;
    }
}
