// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Robot.

package frc.robot;

import edu.wpi.first.hal.FRCNetComm.tInstances;
import edu.wpi.first.hal.FRCNetComm.tResourceType;
import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.networktables.NetworkTableInstance;
import edu.wpi.first.hal.HAL;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.PowerDistribution.ModuleType;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.CommandScheduler;
import frc.robot.RobotContainer.LimeLightTargetState;
import edu.wpi.first.wpilibj.AddressableLED;
import edu.wpi.first.wpilibj.AddressableLEDBuffer;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.PneumaticsModuleType;
import edu.wpi.first.wpilibj.PowerDistribution;
import edu.wpi.first.wpilibj.RobotController;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {
    NetworkTableInstance inst = NetworkTableInstance.getDefault();

    private Command m_autonomousCommand;

    private RobotContainer m_robotContainer;
    private Compressor m_compresor;

    private Timer timer;
    private PowerDistribution PDH;

    NetworkTable databace = inst.getTable("PiTable");
	NetworkTableEntry entry = databace.getEntry("IsRobotEnabled");

    private AddressableLED m_LEDs;
    private AddressableLEDBuffer m_LEDBuffer;
    private NetworkTableEntry alienceColorEntry;

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
        // Instantiate our RobotContainer.  This will perform all our button bindings, and put our
        // autonomous chooser on the dashboard.
        // NetworkTableInstance.getDefault().setUpdateRate(0.02);
        LiveWindow.disableAllTelemetry();
        m_robotContainer = RobotContainer.getInstance();
        HAL.report(tResourceType.kResourceType_Framework, tInstances.kFramework_RobotBuilder);
        
        inst.startClientTeam(4607);

        m_compresor = new Compressor(Constants.pnumaticHub, PneumaticsModuleType.REVPH);
        m_compresor.disable();
        // m_compresor.disable();

        // RobotController.setBrownoutVoltage(6.5);

        timer = new Timer();
        timer.start();

        PDH = new PowerDistribution(Constants.PDH, ModuleType.kRev);

        m_LEDs = new AddressableLED(9);
        m_LEDs.setLength(27);
        m_LEDBuffer = new AddressableLEDBuffer(27);
        m_LEDs.setData(m_LEDBuffer);
        m_LEDs.start();

        NetworkTableInstance inst = NetworkTableInstance.getDefault();
        NetworkTable FMSInfo = inst.getTable("FMSInfo");
        alienceColorEntry = FMSInfo.getEntry("IsRedAlliance");
    }

    /**
    * This function is called every robot packet, no matter the mode. Use this for items like
    * diagnostics that you want ran during disabled, autonomous, teleoperated and test.
    *
    * <p>This runs after the mode specific periodic functions, but before
    * LiveWindow and SmartDashboard integrated updating.
    */
    @Override
    public void robotPeriodic() {
        // Runs the Scheduler.  This is responsible for polling buttons, adding newly-scheduled
        // commands, running already-scheduled commands, removing finished or interrupted commands,
        // and running subsystem periodic() methods.  This must be called from the robot's periodic
        // block in order for anything in the Command-based framework to work.
        CommandScheduler.getInstance().run();

        if (timer.hasElapsed(0.5)) {
            m_robotContainer.m_climberSubsystem.resetEncoder();
            timer.stop();
            timer.reset();
        }

        boolean isRed = alienceColorEntry.getBoolean(true);
        boolean[] state = { !m_robotContainer.m_towerSubsystem.getMidBrakeBeam(), !m_robotContainer.m_towerSubsystem.getHighBrakeBeam() };

        for (int i = 0; i < 10; i++) {
            if (state[0]) {
                m_LEDBuffer.setHSV(i, isRed ? 0 : 100, 255, 255);
            } else {
                m_LEDBuffer.setHSV(i, 0, 0, 0);
            }
        }

        for (int i = 10; i < 20; i++) {
            if (state[1]) {
                m_LEDBuffer.setHSV(i, isRed ? 0 : 100, 255, 255);
            } else {
                m_LEDBuffer.setHSV(i, 0, 0, 0);
            }
        }

        int hew = 0;
        switch (m_robotContainer.m_lightTargetState) {
            case Idle:
                hew = 0;
                break;
            case NoTarget:
                hew = 0;
                break;
            case Targeting:
                hew = 118;
                break;
            case Ready:
                hew = 64;
                break;
        }
        for (int i = 20; i < 27; i++) {
            if (m_robotContainer.m_lightTargetState == LimeLightTargetState.Idle) {
                m_LEDBuffer.setHSV(i, 0, 0, 0);
            } else {
                m_LEDBuffer.setHSV(i, hew, 255, 255);
            }
        }

        m_LEDs.setData(m_LEDBuffer);
    }


    /**
    * This function is called once each time the robot enters Disabled mode.
    */
    @Override
    public void disabledInit() {
		entry.setBoolean(false);
        m_compresor.disable();
        // Shuffleboard.stopRecording();
    }

    @Override
    public void disabledPeriodic() {
		entry.setBoolean(false);
    }

    /**
    * This autonomous runs the autonomous command selected by your {@link RobotContainer} class.
    */
    @Override
    public void autonomousInit() {
        m_autonomousCommand = m_robotContainer.getAutonomousCommand();

        // schedule the autonomous command (example)
        if (m_autonomousCommand != null) {
            m_autonomousCommand.schedule();
        }

		entry.setBoolean(true);
        
        m_compresor.disable();
    }

    /**
    * This function is called periodically during autonomous.
    */
    @Override
    public void autonomousPeriodic() {
        entry.setBoolean(true);
    }

    @Override
    public void teleopInit() {
        PDH.clearStickyFaults();
        
        RobotContainer.getInstance().m_drivetrainSubsystem.setBrakeMode(false);
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (m_autonomousCommand != null) {
            m_autonomousCommand.cancel();
        }

		entry.setBoolean(true);

        // Shuffleboard.startRecording();

        m_compresor.enableDigital();
    }

    /**
     * This function is called periodically during operator control.
     */
    @Override
    public void teleopPeriodic() {
        //SmartDashboard.putNumber("Compresor Curent", m_compresor.getCurrent());
		entry.setBoolean(true);
        if (RobotController.getBatteryVoltage() >= 11) {
            m_compresor.enableDigital();
        }
        else {
            m_compresor.disable();
        }
    }

    @Override
    public void testInit() {
        // Cancels all running commands at the start of test mode.
        CommandScheduler.getInstance().cancelAll();
    }

    /**
    * This function is called periodically during test mode.
    */
    @Override
    public void testPeriodic() {
    }

}