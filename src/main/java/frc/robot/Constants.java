// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot;

import edu.wpi.first.math.kinematics.DifferentialDriveKinematics;
import edu.wpi.first.math.util.Units;
import edu.wpi.first.wpilibj.PneumaticsModuleType;

/**
 * The Constants class provides a convenient place for teams to hold robot-wide numerical or boolean
 * constants.  This class should not be used for any other purpose.  All constants should be
 * declared globally (i.e. public static).  Do not put anything functional in this class.
 *
 * <p>It is advised to statically import this class (or one of its inner classes) wherever the
 * constants are needed, to reduce verbosity.
 */
public class Constants {
   /**
    * public static final class DriveConstants {
    *   public static final int kLeftMotor1Port = 0;
    *   public static final int kLeftMotor2Port = 1;
    *   public static final int kRightMotor1Port = 2;
    *   public static final int kRightMotor2Port = 3; 
    * }
    */
    
    public static final class DriveConstants {
        public static final int leftMotor1ID = 0;
        public static final int leftMotor2ID = 1;
        public static final int rightMotor1ID = 3;
        public static final int rightMotor2ID = 4;
        public static final int leftEncoderID = 2;
        public static final int rightEncoderID = 5;
        public static final int pigeonID = 6;
        public static final int countsPerRevolution = 4096;
        public static final double sensorCoefficient = (Math.PI * Units.inchesToMeters(6)) / countsPerRevolution;
        public static final double ks = 1.0;
        public static final double kv = 1.0;
        public static final double ka = 1.0;
        public static final double kPDriveVel = 1.0;
        public static final double trackWidth_meters = 1;
        public static final DifferentialDriveKinematics kDriveKinematics = new DifferentialDriveKinematics(trackWidth_meters);
        public static final double maxVoltage = 10;
    }

    public static final class FollowPathConstants {
        public static final double kMaxSpeed_MetersPerSecond = 10;
        public static final double kMaxAcceleration_MetersPerSecondSquared = 1;
        public static final double kRamseteB = 0;
        public static final double kRamseteZeta = 0;
    }

    public static final class TowerConstants {
        public static final int agitatiorID = 9;
        public static final int transferWheelID = 10;
        public static final double agitatorSpeed = 0.3;
        public static final double transferWheelSpeed = 0.1;
    }
    public static final class IntakeConstants {
        public static final int motorID = 10;
        public static final int leftSolenoidModule = 0;
        public static final int rightSolenoidModule = 0;
        public static final PneumaticsModuleType SolenoidType = PneumaticsModuleType.CTREPCM;
        public static final int leftSolenoidForwardChannel = 0;
        public static final int leftSolenoidReverseChannel = 0;
        public static final int rightSolenoidForwardChannel = 0;
        public static final int rightSolenoidReverseChannel = 0;

    }
}

